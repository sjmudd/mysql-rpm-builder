#!/bin/bash
#
# build environment for building MySQL from src.rpms
#

myname=$(basename $0)

log () {
	echo "$(date +'%Y-%m-%d %H:%M:%S') $myname[$$]: $@"
}

exit_error () {
	log "ERROR: $@"
	exit 1
}

# Set MAJOR_VERSION from VERSION_ID in /etc/os-release if not set.
# - MAJOR_VERSION will be a single digit major version
get_os_and_version () {
	if [ -z "$ID" ]; then
		. /etc/os-release

		case $ID in
		almalinux|ol|rocky|centos|rhel)
			# convert to a single digit if there's a decimal part
			MAJOR_VERSION=$(echo $VERSION_ID | sed -e 's/\..*//')
			;;
		*)
			exit_error "Unrecognised OS: $NAME ($ID $VERSION_ID). Provide a patch to support your linux version if needed."
		esac
	fi
}

# Install the appropriate src.rpm from upstream sources
# - keep local copy to speed up process so if we do this frequently
install_srpms () {
	local SRPMS="$1" # space separated list of src.rpms to install from urls
	local location
	local rpm
	local url

	log "########################################################"
	log "#                 Installing SRPMS                     #"
	log "########################################################"
	echo
	for url in $SRPMS; do
		log "- want to install $url"
		rpm=$(basename $url)
		location=/data/SRPMS/$rpm
		if [ -e $location ]; then
			log "- found cached $location"
		else
			log "- downloading $url to $location"
			( cd /data/SRPMS && wget -nv $url )
		fi
		log "- installing $url from $location"
		rpm -ivh $location
	done
	log "- SRPMS installed:"
	ls -l ~/rpmbuild/SOURCES/ ~/rpmbuild/SPECS
	echo
}

# - just copy the file and log
copy_file () {
	local src=$1
	local dst=$2

	log "- copying $src to $dst"
	cp $src $dst
}

copy_files () {
	local srcdir=$1
	local dstdir=$2
	local file

	if [ -d $srcdir ]; then
		for file in $srcdir/*; do
			copy_file $file $dstdir/
		done
	fi
}

# install custom patches / sources for the specified build version if provided.
# - assume running as $BUILD_USER user
install_custom_patches () {
	local version="$1"
	local dir

	if [ -d /data/config/$version ]; then
		log "- applying custom patches for $version"
		for dir in SPECS SOURCES; do
			if [ $(find /data/config/$version/$dir -type f | wc -l) != 0 ]; then
				copy_files /data/config/$version/$dir ~/rpmbuild/$dir
			fi
		done
		# applying patches if present to spec file
		# - applied in filesort order
		if [ $(find ~/rpmbuild/SPECS -type f -name "*patch*" | wc -l) != 0 ]; then
			for file in ~/rpmbuild/SPECS/*patch*; do
				log "- applying patch: $file"
				( cd ~/rpmbuild/SPECS && patch -p0 < $file )
			done
		fi

	else
		log "- no custom patches to apply for $version"
	fi
}

# return the src rpm location based on the build version / OS we are building
get_srpm_location () {
	awk -v os_version="${ID}${MAJOR_VERSION}" -v mysql_label=$mysql_label 'mysql_label == $1 && os_version == $2 { print $4 }' $config
}

# build package
# - FIXME (add signing)
rpmbuild_rpms () {
	local label=${mysql_label}__${ID}${VERSION_ID}__$(date +%Y%m%d.%H%M%S)

	cd ~/rpmbuild/SPECS
	# Careful with spacing and quoting!
	log "### rpmbuild started at $(date)"
	set -x
	rpmbuild --define 'el'$MAJOR_VERSION' 1' -ba mysql.spec
	rc=$?
	set +x
	log "### rpmbuild terminated at $(date), exit status: $rc"

	# If build is successful record the installed package list,
	# or record the failed list as that may need fixing.
	rpm_qa=/data/log/rpm-qa.$label
	if [ $rc = 0 ]; then
		rpm -qa | sort > $rpm_qa
	else
		rpm -qa | sort > $rpm_qa.failed
	fi

	return $rc
}


# run the BUILD_USER stage: build rpms as the build user.
build_rpm_stage () {
	set -o pipefail
	local logfile=/data/log/build__${label}.log

	log "- sending build logging to $logfile"
	build_rpm_stage_logged 2>&1 | tee -a $logfile
}

# run the BUILD_USER stage with logging enabled
build_rpm_stage_logged () {
	local build_script
	local final_location

	log "### Starting build stage at $(date)"
	install_srpms $(get_srpm_location)
	rpmbuild_rpms
	rc=$?
	log "- completed rpm build, return status: $rc"

	if [ $rc = 0 ]; then
		# Move built rpms to built location to ensure that they are kept
		log "### Build succeeded, moving rpms to /data/built"
		final_location=/data/built/${ID}${MAJOR_VERSION}__${mysql_label}
		if [ ! -d $final_location ]; then
			log "- creating directory $final_location"
			mkdir -p $final_location
		fi
		for file in ~/rpmbuild/SRPMS/*.rpm ~/rpmbuild/RPMS/*/*.rpm; do
			log "- moving $file --> $final_location"
			mv $file $final_location/
		done
		cp /etc/os-release $final_location/etc_os-release
	fi

	log "### Completed build stage at $(date) in $SECONDS seconds with exit status: $rc"
}

# run the root user stage: prepare the OS for the build
ossetup_stage () {
	local logfile=/data/log/ossetup__${label}.log

	log "- sending prepare logging to $logfile"
	set -o pipefail
	ossetup_stage_logged 2>&1 | tee -a $logfile
	log "- ossetup_stage_logged took $SECONDS seconds to run" | tee -a $logfile

	# Complete the rpm build part if requested.
	# - if not indicate how to proceed
	if [ -z "$build_all" ]; then
		log "- continue the build as $BUILD_USER by doing:"
		log
		log "    su - $BUILD_USER /data/build $mysql_label"
		log
		log "- alternatively rerun the complete process in one go with:"
		log
		log "    $0 -a $mysql_label"
		log
		exit 0
	fi

	log "##############################################################"
	log "#  Switching to user $BUILD_USER to complete the rpm build"
	log "##############################################################"
	echo
	su - $BUILD_USER $0 $mysql_label
}

# just check if this is an executable script with a shebang
check_script_permissions () {
	local script=$1

	test -e $script || exit_error "$script not found"
	test -x $script || exit_error "$script not executable"
	head -1 $script | grep -q "^#!" || exit "$script has no shebang"
}

get_ossetup_script () {
	awk -v os_version="${ID}${MAJOR_VERSION}" -v mysql_label=$mysql_label 'mysql_label == $1 && os_version == $2 { print $3 }' $config
}

ossetup_stage_logged () {
	local rc

	ossetup_script=$(get_ossetup_script)
	if [ -z "$ossetup_script" ]; then
		exit_error "No OS prepare script defined for ${ID}${MAJOR_VERSION} and ${mysql_label}. Please configure one."
	fi

	ossetup_script=/data/config/ossetup/$ossetup_script
	create_rpmbuild_user=/data/config/ossetup/create_rpmbuild_user

	if [ ! -e "$ossetup_script" ]; then
		log "Missing prepare script '$ossetup_script' prepare operating system $NAME ($ID $VERSION_ID) to build MySQL version $mysql_label"
		log "MAJOR_VERSION: $MAJOR_VERSION"
		log "NAME: $NAME"
		log "ID: $ID"
		log "VERSION_ID: $VERSION_ID"
		log "mysql_label: $mysql_label"
		exit 1
	fi

	log "########################################################"
	log "#    Preparing OS: $NAME ($ID $VERSION_ID)"
	log "#    for building rpms with label $mysql_label"
	log "#    using script $ossetup_script"
	log "########################################################"
	echo

	if head -1 $ossetup_script | grep -q "^#!"; then
		if ! test -x $ossetup_script; then
			log "$ossetup_script should be executable"
			exit 1
		fi
		log "Executing: $ossetup_script (new behaviour)"
		$ossetup_script
		rc=$?

		log "$ossetup_script returned with status $rc"
	else
		log "Sourcing: $ossetup_script (legacy mode)"
		. $ossetup_script
		log "Sourcing: $ossetup_script complete, now running prepare function"

		prepare
	fi

	check_script_permissions $create_rpmbuild_user
	log "Executing: $create_rpmbuild_user"
	$create_rpmbuild_user
	rc=$?
	log "$create_rpmbuild_user returned with status $rc"

	log
	log "########################################################"
	log "#    Completed OS: $NAME ($ID $VERSION_ID) preparation"
	log "#    for building rpms with label $mysql_label"
	log "########################################################"
	echo
}

config=/data/build.conf
BUILD_USER=rpmbuild
build_all=

set -e

if [ -z "$USER" ]; then
	USER=$(id -un)
fi

while getopts an flag; do
	case $flag in
	a)	build_all=1 ;;
	n)	build_all= ;;
	*)	exit_error "INVALID FLAG $flag"
	esac
done
shift $(($OPTIND - 1))

mysql_label=$1
if [ -z "$mysql_label" ]; then
	exit_error "Please provide mysql_label name for building"
fi

log "Getting OS version info"
get_os_and_version

log "NAME: $NAME, ID: $ID, MAJOR_VERSION: $MAJOR_VERSION, VERSION_ID: $VERSION_ID"

# Used for logging
label=${mysql_label}__${ID}${MAJOR_VERSION}__$(date +%Y%m%d.%H%M%S)

case "$USER" in
root)		ossetup_stage;;
$BUILD_USER)	build_rpm_stage;;
*)		exit_error "unexpected USER $USER, please call the script properly"
esac
