#!/bin/sh
#
# build environment for building MySQL from src.rpms
#

get_os_and_version () {
	if [ -z "$ID" ]; then
		. /etc/os-release

		case $ID in
		almalinux|ol|rocky|centos|rhel)
			# convert to a single digit if there's a decimal part
			BUILD_VERSION=$(echo $VERSION_ID | sed -e 's/\..*//')
			;;
		*)
			echo "Unrecognised OS: $NAME ($ID $VERSION_ID). Provide a patch to support your linux version if needed."
			exit 1
		esac
	fi
}

setup_build_user () {
	local name="$NAME ($ID $VERSION_ID)"

	echo "########################################################"
	echo "#                       Preparing                      #"
	echo "#                 $NAME ($ID $VERSION_ID)"
	echo "#                  for building rpms                   #"
	echo "########################################################"
	echo
	if ! grep $BUILD_USER /etc/passwd; then
		echo "### Adding missing build user: $BUILD_USER"
		useradd --no-create-home -d /data $BUILD_USER
	else
		echo "### Required build user $BUILD_USER already present"
	fi
}

# Install the appropriate src.rpm from upstream sources
# - keep local copy to speed up process so if we do this frequently
install_srpms () {
	local SRPMS="$1" # space separated list of src.rpms to install from urls
	local location
	local rpm
	local url

	echo "########################################################"
	echo "#                 installing SRPMS                     #"
	echo "########################################################"
	echo
	for url in $SRPMS; do
		echo "- Want to install $url"
		rpm=$(basename $url)
		location=/data/SRPMS/$rpm
		if [ -e $location ]; then
			echo "- Found cached $location"
		else
			echo "- Downloading $url to $location"
			( cd /data/SRPMS && wget $url )
		fi
		echo "- Installing $url from $location"
		rpm -ivh $location
	done
	echo "- SRPMS installed:"
	ls -l ~/rpmbuild/SOURCES/ ~/rpmbuild/SPECS
	echo
}

# - just copy the file and log
copy_file () {
	local src=$1
	local dst=$2

	echo "- copying $src to $dst"
	cp $src $dst
}

copy_files () {
	local srcdir=$1
	local dstdir=$2
	local file

	if [ -d $srcdir ]; then
		for file in $srcdir/*; do
			copy_file $file $dstdir/
		done
	fi
}

# install custom patches / sources for the specified build version if provided.
# - assume running as $BUILD_USER user
install_custom_patches () {
	local version="$1"
	local dir

	if [ -d /data/config/$version ]; then
		echo "- applying custom patches for $version"
		for dir in SPECS SOURCES; do
			copy_files /data/config/$version/$dir ~/rpmbuild/$dir
		done
	else
		echo "- No custom patches to apply for $version"
	fi
}

# Create missing directories
create_missing_directories () {
	local directories="/data/SRPMS /data/log"
	local dir

	for dir in $directories; do
		if ! test -d $dir; then
			echo "Creating missing directory: $dir"
			mkdir -p $dir
		fi
	done
}

# build package
# - FIXME (add signing)
rpmbuild_rpms () {
	local timestamp=$(date +%Y%m%d.%H%M%S)
	local label=${ID}.${VERSION_ID}__${mysql_build_version}__$timestamp

	cd ~/rpmbuild/SPECS
	# Careful with spacing and quoting!
#	rpmbuild --define 'el8 '$BUILD_VERSION --define 'rhel '$BUILD_VERSION -ba mysql.spec 2>&1 | tee -a ~/log/mysql-build.$label.log
	rpmbuild --define 'el8 '$BUILD_VERSION -ba mysql.spec 2>&1 | tee -a ~/log/build__$label.log
	rc=$?

	# If build is successful record the installed package list,
	# or record the failed list as that may need fixing.
	rpm_qa=~/log/rpm-qa.$label
	if [ $rc = 0 ]; then
		rpm -qa | sort > $rpm_qa
	else
		rpm -qa | sort > $rpm_qa.failed
	fi
}

# Complete the rpm build part if requested.
# - if not indicate how to proceed
run_build_user_part () {
	if [ -n "$build_all" ]; then
		echo "##############################################################"
		echo "#  switching to user $BUILD_USER to complete the rpm build"
		echo "##############################################################"
		echo
		su - $BUILD_USER $0 $mysql_build_version
	else
		echo "Continue the build as $BUILD_USER by doing:"
		echo
		echo "    su - $BUILD_USER /data/build $mysql_build_version"
		echo
		echo "or rerun the complete process in one go with:"
		echo
		echo "    $0 -a $mysql_build_version"
		echo
	fi
}

BUILD_USER=rpmbuild
build_all=

set -e

if [ -z "$USER" ]; then
	USER=$(id -un)
fi

while getopts a flag; do
	case $flag in
	a)	build_all=1
		;;
	*)	echo "INVALID FLAG $flag"
		exit 1
	esac
done
shift $(($OPTIND - 1))

mysql_build_version=$1
if [ -z "$mysql_build_version" ]; then
	echo "please provide mysql_build_version name, directory under config"
	exit 1
fi

get_os_and_version
create_missing_directories

case "$USER" in
root)
	##########################
	###    run as root     ###
	##########################
	location=$(grep ^prepare /data/config/build.conf | grep -w ${ID}.${BUILD_VERSION} | grep -w ${mysql_build_version} | awk '{ print $4 }')
	if [ -n "$location" ]; then
		location=/data/config/$location
		if [ -e "$location" ]; then
			echo "sourcing prepare script: $location"
			. $location
			prepare
			setup_build_user
		else
			echo "Missing prepare script $location to prepare operating system $NAME ($ID $VERSION_ID) to build MySQL version $mysql_build_version"
			echo "BUILD_VERSION: $BUILD_VERSION"
			echo "NAME: $NAME"
			echo "ID: $ID"
			echo "VERSION_ID: $VERSION_ID"
			echo "mysql_build_version: $mysql_build_version"
			exit 1
		fi
	else
		echo "No OS prepare script defined for ${ID}.${BUILD_VERSION} and ${mysql_build_version}. Please configure one."
		exit 1
	fi

	echo
	echo "########################################################"
	echo "#              os preparation complete for             #"
	echo "#                 $NAME ($ID $VERSION_ID)"
	echo "########################################################"
	echo

	run_build_user_part
	;;
$BUILD_USER)
	##########################
	### run as $BUILD_USER ###
	##########################
	location=$(grep ^build /data/config/build.conf | grep -w ${ID}.${BUILD_VERSION} | grep -w ${mysql_build_version} | awk '{ print $4 }')
	if [ -n "$location" ]; then
		location=/data/config/$location
		if [ -e "$location" ]; then
			echo "sourcing build script: $location"
			. $location
			build
		else
			echo "Missing build script in $location to build $mysql_build_version on $ID.${BUILD_VERSION}"
			echo "BUILD_VERSION: $BUILD_VERSION"
			echo "NAME: $NAME"
			echo "ID: $ID"
			echo "VERSION_ID: $VERSION_ID"
			echo "mysql_build_version: $mysql_build_version"
			exit 1
		fi
	else
		echo "No rpm build script defined for ${ID}.${BUILD_VERSION} and ${mysql_build_version}. Please configure one."
		exit 1
	fi
	;;
*)
	echo "unexpected USER $USER, please call the script properly"
	exit 1
esac
